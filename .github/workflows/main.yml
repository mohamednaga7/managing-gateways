name: CI

on:
  push:
    branches:
      - main

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      client: ${{ steps.filter.outputs.client }}
      docker: ${{ steps.filter.outputs.docker }}

    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            client:
              - 'client/**'
            docker:
              - 'docker-compose.yml'

      - name: api changed
        if: steps.filter.outputs.api == 'true'
        run: echo "Api file"

      - name: client changed
        if: steps.filter.outputs.api == 'true'
        run: echo "Client file"

      - name: docker changed
        if: steps.filter.outputs.api == 'true'
        run: echo "Docker compose file"

  client_build:
    runs-on: ubuntu-latest

    needs: paths-filter
    if: needs.paths-filter.outputs.client == 'true'

    steps:
      - uses: actions/checkout@v2

      - name: docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}

        run: |
          echo $DOCKER_ACCESS_TOKEN | docker login ghcr.io --username $DOCKER_USER --password-stdin

      - name: docker build
        run: |
          docker build ./client -t gateways_manager_client

      - name: tag the build
        run: |
          docker tag gateways_manager_client ghcr.io/mohamednaga7/gateways_manager_client

      - name: docker push
        run: |
          docker push ghcr.io/mohamednaga7/gateways_manager_client

  api_build:
    runs-on: ubuntu-latest

    needs: paths-filter
    if: needs.paths-filter.outputs.api == 'true'

    steps:
      - uses: actions/checkout@v2

      - name: docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}

        run: |
          echo $DOCKER_ACCESS_TOKEN | docker login ghcr.io --username $DOCKER_USER --password-stdin

      - name: docker build
        run: |
          docker build ./api -t gateways_manager_api

      - name: tag the build
        run: |
          docker tag gateways_manager_api ghcr.io/mohamednaga7/gateways_manager_api

      - name: docker push
        run: |
          docker push ghcr.io/mohamednaga7/gateways_manager_api

  client_deploy:
    needs: client_build
    runs-on: ubuntu-latest
    steps:
      - name: SSH and deploy to the server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /apps/managing-gateways
            git pull origin main
            docker-compose pull client
            docker-compose up -d --force-recreate client

  api_deploy:
    needs: api_build
    runs-on: ubuntu-latest
    steps:
      - name: SSH and deploy to the server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /apps/managing-gateways
            git pull origin main
            docker-compose pull api
            docker-compose up -d --force-recreate api

  docker_deploy:
    needs: paths-filter
    runs-on: ubuntu-latest
    if: needs.paths-filter.outputs.docker == 'true'
    steps:
      - name: SSH and deploy to the server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /apps/managing-gateways
            git pull origin main
            docker-compose pull
            docker-compose up -d --force-recreate
